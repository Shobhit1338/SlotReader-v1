name: Django CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: slotreader
          POSTGRES_PASSWORD: slotreader
          POSTGRES_DB: slotreader
        options: >-
          --health-cmd "pg_isready -U slotreader"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DJANGO_SECRET_KEY: testing-secret-key
      DJANGO_DEBUG: "False"
      DJANGO_ALLOWED_HOSTS: "*"
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: slotreader
      DB_USER: slotreader
      DB_PASSWORD: slotreader
      DB_HOST: localhost
      DB_PORT: "5432"
      CORS_ALLOW_ALL_ORIGINS: "False"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Wait for database
        run: |
          python - <<'PYCODE'
          import os
          import time

          import psycopg2

          host = os.environ.get("DB_HOST", "localhost")
          port = int(os.environ.get("DB_PORT", "5432"))
          dbname = os.environ.get("DB_NAME", "slotreader")
          user = os.environ.get("DB_USER", "slotreader")
          password = os.environ.get("DB_PASSWORD", "slotreader")

          for attempt in range(10):
              try:
                  conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host, port=port)
              except psycopg2.OperationalError:
                  time.sleep(3)
              else:
                  conn.close()
                  break
          else:
              raise SystemExit("Database connection failed")
          PYCODE

      - name: Django system checks
        working-directory: backend
        run: python manage.py check

      - name: Run tests
        working-directory: backend
        run: python manage.py test

      - name: Verify migrations are in sync
        working-directory: backend
        run: python manage.py makemigrations --check
