name: Django CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DJANGO_SECRET_KEY: testing-secret-key
      DJANGO_DEBUG: "False"
      DJANGO_ALLOWED_HOSTS: "*"
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CORS_ALLOW_ALL_ORIGINS: "False"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Wait for database
        run: |
          python - <<'PYCODE'
          import os
          import time
          from urllib.parse import urlparse

          import psycopg2

          database_url = os.environ.get("DATABASE_URL")
          if not database_url:
              raise SystemExit("DATABASE_URL environment variable is required")

          parsed = urlparse(database_url)
          host = parsed.hostname
          port = parsed.port or 5432
          dbname = parsed.path[1:] if parsed.path else 'postgres'
          user = parsed.username
          password = parsed.password

          for attempt in range(10):
              try:
                  conn = psycopg2.connect(
                      dbname=dbname,
                      user=user,
                      password=password,
                      host=host,
                      port=port,
                      connect_timeout=10
                  )
              except psycopg2.OperationalError as e:
                  if attempt < 9:
                      time.sleep(3)
                  else:
                      raise SystemExit(f"Database connection failed after 10 attempts: {e}")
              else:
                  conn.close()
                  break
          PYCODE

      - name: Django system checks
        working-directory: backend
        run: python manage.py check

      - name: Run tests
        working-directory: backend
        run: python manage.py test

      - name: Verify migrations are in sync
        working-directory: backend
        run: python manage.py makemigrations --check
