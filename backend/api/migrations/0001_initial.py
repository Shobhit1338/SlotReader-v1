# Generated by Django 5.2.7 on 2025-11-01 11:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import pgvector.django.vector
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('time_slot', models.TimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('week_start_date', models.DateField(help_text='Date of Monday for this week')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Schedule',
                'verbose_name_plural': 'Schedules',
                'db_table': 'schedules',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('source_type', models.CharField(choices=[('url', 'URL'), ('keyword', 'Keyword'), ('pdf', 'PDF'), ('youtube', 'YouTube')], max_length=20)),
                ('source_value', models.CharField(max_length=500)),
                ('score', models.FloatField(default=1.0, help_text='Scheduler weighting score')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
                'db_table': 'topics',
            },
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('format', models.CharField(choices=[('recap', 'Recap'), ('bullets', 'Bullets')], max_length=20)),
                ('content', models.TextField()),
                ('citation_spans', models.JSONField(blank=True, default=dict, help_text='Citation metadata and spans')),
                ('verification_badge', models.CharField(choices=[('GREEN', 'Green'), ('AMBER', 'Amber'), ('RED', 'Red')], default='AMBER', max_length=10)),
                ('verification_score', models.FloatField(default=0.0, help_text='Numerical verification score')),
                ('citation_density', models.FloatField(default=0.0, help_text='Citations per 120 words')),
                ('embedding', pgvector.django.vector.VectorField(blank=True, dimensions=1536, help_text='Vector embedding for RAG retrieval', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='summary', to='api.schedule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summaries', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summaries', to='api.topic')),
            ],
            options={
                'verbose_name': 'Summary',
                'verbose_name_plural': 'Summaries',
                'db_table': 'summaries',
            },
        ),
        migrations.AddField(
            model_name='schedule',
            name='topic',
            field=models.ForeignKey(blank=True, help_text='Nullable for placeholder slots', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedules', to='api.topic'),
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('persona', models.CharField(blank=True, choices=[('techie', 'Techie'), ('business', 'Business'), ('student', 'Student'), ('freelancer', 'Freelancer')], max_length=20, null=True)),
                ('goal_reads_per_week', models.IntegerField(default=5)),
                ('preferred_time_slot', models.TimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preferences',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'user_preferences',
            },
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['user', 'is_active'], name='topics_user_id_8d2b4f_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['user', 'score'], name='topics_user_id_b3c3f4_idx'),
        ),
        migrations.AddIndex(
            model_name='summary',
            index=models.Index(fields=['user', 'created_at'], name='summaries_user_id_f389a3_idx'),
        ),
        migrations.AddIndex(
            model_name='summary',
            index=models.Index(fields=['topic', 'created_at'], name='summaries_topic_i_4d1631_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['user', 'week_start_date'], name='schedules_user_id_6a559d_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['user', 'day_of_week', 'status'], name='schedules_user_id_dac90f_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['user', 'status'], name='schedules_user_id_894070_idx'),
        ),
    ]
